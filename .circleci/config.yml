# CircleCI configuration

version: 2.1

commands:
  file_exists:
    description: "Checks whether a file exists"
    parameters:
      file:
        type: string
    steps:
      - run:
          name: Checks whether "<< parameters.file >>" exists
          command: |
            if [ -e << parameters.file >> ]; then
              echo "File exists."
              exit 0
            else
              echo "File not exists."
              exit 1
            fi

  azure_zip_deploy:
    description: "Azure ZIP Deploy"
    parameters:
      app:
        type: string
      user:
        type: string
      password:
        type: string
      zip:
        type: string
    steps:
      - run:
          name: Deploy to Azure
          command: |
            mkdir deploy
            curl -s -X POST https://<< parameters.user >>:<< parameters.password >>@<< parameters.app >>.scm.azurewebsites.net/api/zipdeploy -T << parameters.zip >> -o ./deploy/result.html -w '%{http_code}' > ./deploy/http_code.txt
            if [ $(cat ./deploy/http_code.txt) -eq "200" ]; then
                echo "Deploy successful."
                exit 0
            else
                echo "Deploy failed."
                exit 1
            fi

      - store_artifacts:
          path: ./deploy

executors:
  build:
    docker:
      - image: circleci/php:7.2

  deployment:
    docker:
      - image: cimg/base:stable

jobs:
  build_development:
    working_directory: ~/development
    executor: build

    steps:
      - checkout

      - restore_cache:
          keys:
            - composer-dev-{{ checksum "composer.lock" }}
            - composer-

      - run:
          name: Composer install (with require-dev)
          command: composer install --dev -n --prefer-dist

      - save_cache:
          key: composer-dev-{{ checksum "composer.lock" }}
          paths:
            - ./vendor

      - run:
          name: Create .env file
          command: cp .env.test .env

      - run:
          name: Generate ORM proxies
          command: vendor/bin/doctrine orm:generate-proxies

      - run:
          name: Remove .env file
          command: rm -v ./.env

      - run:
          name: Create version file
          command: echo "${CIRCLE_SHA1}.${CIRCLE_BUILD_NUM}" | tee version.txt

      - run:
          name: ZIP archive (dev)
          command: >-
            zip -r development_app.zip
            bin cert config error public src template vendor cli-config.php INSTALL.md README.md version.txt
            -x public/.htaccess.example public/Web.config.sample public/Web.config.public

      - store_artifacts:
          path: ./development_app.zip

      - persist_to_workspace:
          root: .
          paths:
            - .

  build_production:
    working_directory: ~/production
    executor: build

    steps:
      - checkout

      - restore_cache:
          keys:
            - composer-{{ checksum "composer.lock" }}
            - composer-

      - run:
          name: Composer install
          command: composer install --no-dev -n --prefer-dist --optimize-autoloader

      - save_cache:
          key: composer-{{ checksum "composer.lock" }}
          paths:
            - ./vendor

      - run:
          name: Create Web.config file
          command: cp ./public/Web.config.prod ./public/Web.config

      - run:
          name: Create .env file
          command: cp .env.test .env

      - run:
          name: Generate ORM proxies
          command: vendor/bin/doctrine orm:generate-proxies

      - run:
          name: Remove .env file
          command: rm -v ./.env

      - run:
          name: Create version file
          command: echo "${CIRCLE_SHA1}.${CIRCLE_BUILD_NUM}" | tee version.txt

      - run:
          name: ZIP archive
          command: >-
            zip -r production_app.zip
            bin cert config error public src template vendor cli-config.php INSTALL.md README.md version.txt
            -x public/.htaccess.example public/Web.config.sample public/Web.config.public

      - store_artifacts:
          path: ./production_app.zip

      - persist_to_workspace:
          root: .
          paths:
            - .

  test:
    working_directory: ~/development
    executor: build

    steps:
      - attach_workspace:
          at: .

      - run:
          name: Create .env file
          command: cp .env.test .env

      # 確認用
      # - store_artifacts:
      #     path: ./.env

      - run:
          name: PHP CodeSniffer
          command: composer phpcs

      - run:
          name: PHPStan
          command: composer phpstan > ./report/phpstan_result.txt

      - run:
          name: PHPUnit
          command: composer phpunit

      - store_artifacts:
          path: ./report

      - run:
          name: Remove .env file
          command: rm -v ./.env

  deploy_to_dev:
    working_directory: ~/development
    executor: deployment

    steps:
      - attach_workspace:
          at: .

      - file_exists:
          file: development_app.zip

      - azure_zip_deploy:
          app: ssk-portal2018-admin-win-dev
          user: $DEV_AAS_USER
          password: $DEV_AAS_PASSWORD
          zip: development_app.zip

  deploy_to_test:
    working_directory: ~/development
    executor: deployment

    steps:
      - attach_workspace:
          at: .

      - file_exists:
          file: development_app.zip

      - azure_zip_deploy:
          app: ssk-portal2018-admin-win-test
          user: $TEST_AAS_USER
          password: $TEST_AAS_PASSWORD
          zip: development_app.zip

  deploy_to_prod:
    working_directory: ~/production
    executor: deployment

    steps:
      - attach_workspace:
          at: .

      - file_exists:
          file: production_app.zip

      - azure_zip_deploy:
          app: ssk-portal2018-admin-win-prod
          user: $PROD_AAS_USER
          password: $PROD_AAS_PASSWORD
          zip: production_app.zip

workflows:
  version: 2

  deploy_development:
    jobs:
      - build_development:
          filters:
            branches:
              only: develop

      - test:
          requires:
            - build_development

      - deploy_to_dev:
          requires:
            - build_development

  deploy_development_feature:
    jobs:
      - build_development:
          filters:
            branches:
              ignore:
                - develop
                - master

      - test:
          requires:
            - build_development

      - deploy_approval:
          type: approval
          requires:
            - build_development

      - deploy_to_test:
          requires:
            - deploy_approval

  deploy_production:
    jobs:
      - build_development:
          filters:
            branches:
              only: master

      - test:
          requires:
            - build_development

      - build_production:
          requires:
            - test

      - deploy_approval:
          type: approval
          requires:
            - build_production

      - deploy_to_prod:
          requires:
            - deploy_approval
